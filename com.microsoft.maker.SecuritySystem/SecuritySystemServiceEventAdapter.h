//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace microsoft { namespace maker { namespace SecuritySystem {

// This class, and the associated EventArgs classes, exist for the benefit of JavaScript developers who
// do not have the ability to implement ISecuritySystemService. Instead, SecuritySystemServiceEventAdapter
// provides the Interface implementation and exposes a set of compatible events to the developer.
public ref class SecuritySystemServiceEventAdapter sealed : [Windows::Foundation::Metadata::Default] ISecuritySystemService
{
public:
    // Method Invocation Events
    event Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemTriggerCaptureCalledEventArgs^>^ TriggerCaptureCalled 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemTriggerCaptureCalledEventArgs^>^ handler) 
        { 
            return _TriggerCaptureCalled += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SecuritySystemServiceEventAdapter^>(sender), safe_cast<SecuritySystemTriggerCaptureCalledEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _TriggerCaptureCalled -= token; 
        } 
    internal: 
        void raise(SecuritySystemServiceEventAdapter^ sender, SecuritySystemTriggerCaptureCalledEventArgs^ args) 
        { 
            _TriggerCaptureCalled(sender, args);
        } 
    }

    // Property Read Events
    event Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetVersionRequestedEventArgs^>^ GetVersionRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetVersionRequestedEventArgs^>^ handler) 
        { 
            return _GetVersionRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SecuritySystemServiceEventAdapter^>(sender), safe_cast<SecuritySystemGetVersionRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetVersionRequested -= token; 
        } 
    internal: 
        void raise(SecuritySystemServiceEventAdapter^ sender, SecuritySystemGetVersionRequestedEventArgs^ args) 
        { 
            _GetVersionRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetIsEnabledRequestedEventArgs^>^ GetIsEnabledRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetIsEnabledRequestedEventArgs^>^ handler) 
        { 
            return _GetIsEnabledRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SecuritySystemServiceEventAdapter^>(sender), safe_cast<SecuritySystemGetIsEnabledRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetIsEnabledRequested -= token; 
        } 
    internal: 
        void raise(SecuritySystemServiceEventAdapter^ sender, SecuritySystemGetIsEnabledRequestedEventArgs^ args) 
        { 
            _GetIsEnabledRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetLastCaptureFileNameRequestedEventArgs^>^ GetLastCaptureFileNameRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetLastCaptureFileNameRequestedEventArgs^>^ handler) 
        { 
            return _GetLastCaptureFileNameRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SecuritySystemServiceEventAdapter^>(sender), safe_cast<SecuritySystemGetLastCaptureFileNameRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLastCaptureFileNameRequested -= token; 
        } 
    internal: 
        void raise(SecuritySystemServiceEventAdapter^ sender, SecuritySystemGetLastCaptureFileNameRequestedEventArgs^ args) 
        { 
            _GetLastCaptureFileNameRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetLastCaptureTimeRequestedEventArgs^>^ GetLastCaptureTimeRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetLastCaptureTimeRequestedEventArgs^>^ handler) 
        { 
            return _GetLastCaptureTimeRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SecuritySystemServiceEventAdapter^>(sender), safe_cast<SecuritySystemGetLastCaptureTimeRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLastCaptureTimeRequested -= token; 
        } 
    internal: 
        void raise(SecuritySystemServiceEventAdapter^ sender, SecuritySystemGetLastCaptureTimeRequestedEventArgs^ args) 
        { 
            _GetLastCaptureTimeRequested(sender, args);
        } 
    }

    event Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetLastUploadTimeRequestedEventArgs^>^ GetLastUploadTimeRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemGetLastUploadTimeRequestedEventArgs^>^ handler) 
        { 
            return _GetLastUploadTimeRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SecuritySystemServiceEventAdapter^>(sender), safe_cast<SecuritySystemGetLastUploadTimeRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _GetLastUploadTimeRequested -= token; 
        } 
    internal: 
        void raise(SecuritySystemServiceEventAdapter^ sender, SecuritySystemGetLastUploadTimeRequestedEventArgs^ args) 
        { 
            _GetLastUploadTimeRequested(sender, args);
        } 
    }

    // Property Write Events
    event Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemSetIsEnabledRequestedEventArgs^>^ SetIsEnabledRequested 
    { 
        Windows::Foundation::EventRegistrationToken add(Windows::Foundation::TypedEventHandler<SecuritySystemServiceEventAdapter^, SecuritySystemSetIsEnabledRequestedEventArgs^>^ handler) 
        { 
            return _SetIsEnabledRequested += ref new Windows::Foundation::EventHandler<Platform::Object^>
            ([handler](Platform::Object^ sender, Platform::Object^ args)
            {
                handler->Invoke(safe_cast<SecuritySystemServiceEventAdapter^>(sender), safe_cast<SecuritySystemSetIsEnabledRequestedEventArgs^>(args));
            }, Platform::CallbackContext::Same);
        } 
        void remove(Windows::Foundation::EventRegistrationToken token) 
        { 
            _SetIsEnabledRequested -= token; 
        } 
    internal: 
        void raise(SecuritySystemServiceEventAdapter^ sender, SecuritySystemSetIsEnabledRequestedEventArgs^ args) 
        { 
            _SetIsEnabledRequested(sender, args);
        } 
    }

    // ISecuritySystemService Implementation
    virtual Windows::Foundation::IAsyncOperation<SecuritySystemTriggerCaptureResult^>^ TriggerCaptureAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<SecuritySystemGetVersionResult^>^ GetVersionAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<SecuritySystemGetIsEnabledResult^>^ GetIsEnabledAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<SecuritySystemGetLastCaptureFileNameResult^>^ GetLastCaptureFileNameAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<SecuritySystemGetLastCaptureTimeResult^>^ GetLastCaptureTimeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);
    virtual Windows::Foundation::IAsyncOperation<SecuritySystemGetLastUploadTimeResult^>^ GetLastUploadTimeAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    virtual Windows::Foundation::IAsyncOperation<SecuritySystemSetIsEnabledResult^>^ SetIsEnabledAsync(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool value);

private:
    event Windows::Foundation::EventHandler<Platform::Object^>^ _TriggerCaptureCalled;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetVersionRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetIsEnabledRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLastCaptureFileNameRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLastCaptureTimeRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _GetLastUploadTimeRequested;
    event Windows::Foundation::EventHandler<Platform::Object^>^ _SetIsEnabledRequested;
};

} } } } 
