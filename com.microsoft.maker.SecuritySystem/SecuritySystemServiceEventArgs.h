//-----------------------------------------------------------------------------
// <auto-generated> 
//   This code was generated by a tool. 
// 
//   Changes to this file may cause incorrect behavior and will be lost if  
//   the code is regenerated.
//
//   Tool: AllJoynCodeGenerator.exe
//
//   This tool is located in the Windows 10 SDK and the Windows 10 AllJoyn 
//   Visual Studio Extension in the Visual Studio Gallery.  
//
//   The generated code should be packaged in a Windows 10 C++/CX Runtime  
//   Component which can be consumed in any UWP-supported language using 
//   APIs that are available in Windows.Devices.AllJoyn.
//
//   Using AllJoynCodeGenerator - Invoke the following command with a valid 
//   Introspection XML file and a writable output directory:
//     AllJoynCodeGenerator -i <INPUT XML FILE> -o <OUTPUT DIRECTORY>
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

namespace com { namespace microsoft { namespace maker { namespace SecuritySystem {

// Methods
public ref class SecuritySystemTriggerCaptureCalledEventArgs sealed
{
public:
    SecuritySystemTriggerCaptureCalledEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SecuritySystemTriggerCaptureResult^ Result
    {
        SecuritySystemTriggerCaptureResult^ get() { return m_result; }
        void set(_In_ SecuritySystemTriggerCaptureResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SecuritySystemTriggerCaptureResult^>^ GetResultAsync(SecuritySystemTriggerCaptureCalledEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SecuritySystemTriggerCaptureResult^>
        {
            return t;
        });
    }
    
private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SecuritySystemTriggerCaptureResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SecuritySystemTriggerCaptureResult^ m_result;
};

// Readable Properties
public ref class SecuritySystemGetVersionRequestedEventArgs sealed
{
public:
    SecuritySystemGetVersionRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SecuritySystemGetVersionResult^ Result
    {
        SecuritySystemGetVersionResult^ get() { return m_result; }
        void set(_In_ SecuritySystemGetVersionResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SecuritySystemGetVersionResult^>^ GetResultAsync(SecuritySystemGetVersionRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SecuritySystemGetVersionResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SecuritySystemGetVersionResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SecuritySystemGetVersionResult^ m_result;
};

public ref class SecuritySystemGetIsEnabledRequestedEventArgs sealed
{
public:
    SecuritySystemGetIsEnabledRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SecuritySystemGetIsEnabledResult^ Result
    {
        SecuritySystemGetIsEnabledResult^ get() { return m_result; }
        void set(_In_ SecuritySystemGetIsEnabledResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SecuritySystemGetIsEnabledResult^>^ GetResultAsync(SecuritySystemGetIsEnabledRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SecuritySystemGetIsEnabledResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SecuritySystemGetIsEnabledResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SecuritySystemGetIsEnabledResult^ m_result;
};

public ref class SecuritySystemGetLastCaptureFileNameRequestedEventArgs sealed
{
public:
    SecuritySystemGetLastCaptureFileNameRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SecuritySystemGetLastCaptureFileNameResult^ Result
    {
        SecuritySystemGetLastCaptureFileNameResult^ get() { return m_result; }
        void set(_In_ SecuritySystemGetLastCaptureFileNameResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SecuritySystemGetLastCaptureFileNameResult^>^ GetResultAsync(SecuritySystemGetLastCaptureFileNameRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SecuritySystemGetLastCaptureFileNameResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SecuritySystemGetLastCaptureFileNameResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SecuritySystemGetLastCaptureFileNameResult^ m_result;
};

public ref class SecuritySystemGetLastCaptureTimeRequestedEventArgs sealed
{
public:
    SecuritySystemGetLastCaptureTimeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SecuritySystemGetLastCaptureTimeResult^ Result
    {
        SecuritySystemGetLastCaptureTimeResult^ get() { return m_result; }
        void set(_In_ SecuritySystemGetLastCaptureTimeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SecuritySystemGetLastCaptureTimeResult^>^ GetResultAsync(SecuritySystemGetLastCaptureTimeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SecuritySystemGetLastCaptureTimeResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SecuritySystemGetLastCaptureTimeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SecuritySystemGetLastCaptureTimeResult^ m_result;
};

public ref class SecuritySystemGetLastUploadTimeRequestedEventArgs sealed
{
public:
    SecuritySystemGetLastUploadTimeRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property SecuritySystemGetLastUploadTimeResult^ Result
    {
        SecuritySystemGetLastUploadTimeResult^ get() { return m_result; }
        void set(_In_ SecuritySystemGetLastUploadTimeResult^ value) { m_result = value; }
    }

    Windows::Foundation::Deferral^ GetDeferral();

    static Windows::Foundation::IAsyncOperation<SecuritySystemGetLastUploadTimeResult^>^ GetResultAsync(SecuritySystemGetLastUploadTimeRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SecuritySystemGetLastUploadTimeResult^>
        {
            return t;
        });
    }

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SecuritySystemGetLastUploadTimeResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    SecuritySystemGetLastUploadTimeResult^ m_result;
};

// Writable Properties
public ref class SecuritySystemSetIsEnabledRequestedEventArgs sealed
{
public:
    SecuritySystemSetIsEnabledRequestedEventArgs(_In_ Windows::Devices::AllJoyn::AllJoynMessageInfo^ info, _In_ bool value);

    property Windows::Devices::AllJoyn::AllJoynMessageInfo^ MessageInfo
    {
        Windows::Devices::AllJoyn::AllJoynMessageInfo^ get() { return m_messageInfo; }
    }

    property bool Value
    {
        bool get() { return m_value; }
    }

    property SecuritySystemSetIsEnabledResult^ Result
    {
        SecuritySystemSetIsEnabledResult^ get() { return m_result; }
        void set(_In_ SecuritySystemSetIsEnabledResult^ value) { m_result = value; }
    }

    static Windows::Foundation::IAsyncOperation<SecuritySystemSetIsEnabledResult^>^ GetResultAsync(SecuritySystemSetIsEnabledRequestedEventArgs^ args)
    {
        args->InvokeAllFinished();
        auto t = concurrency::create_task(args->m_tce);
        return concurrency::create_async([t]() -> concurrency::task<SecuritySystemSetIsEnabledResult^>
        {
            return t;
        });
    }

    Windows::Foundation::Deferral^ GetDeferral();

private:
    void Complete();
    void InvokeAllFinished();
    void InvokeCompleteHandler();

    bool m_raised;
    int m_completionsRequired;
    concurrency::task_completion_event<SecuritySystemSetIsEnabledResult^> m_tce;
    std::mutex m_lock;
    Windows::Devices::AllJoyn::AllJoynMessageInfo^ m_messageInfo;
    bool m_value;
    SecuritySystemSetIsEnabledResult^ m_result;
};

} } } } 
