//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

using namespace concurrency;

namespace com { namespace microsoft { namespace maker { namespace SecuritySystem {

ref class SecuritySystemConsumer;

public ref class SecuritySystemTriggerCaptureResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    
    static SecuritySystemTriggerCaptureResult^ CreateSuccessResult()
    {
        auto result = ref new SecuritySystemTriggerCaptureResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }
    
    static SecuritySystemTriggerCaptureResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SecuritySystemTriggerCaptureResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class SecuritySystemJoinSessionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property SecuritySystemConsumer^ Consumer
    {
        SecuritySystemConsumer^ get() { return m_consumer; }
    internal:
        void set(_In_ SecuritySystemConsumer^ value) { m_consumer = value; }
    };

private:
    int32 m_status;
    SecuritySystemConsumer^ m_consumer;
};

public ref class SecuritySystemGetVersionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint16 Version
    {
        uint16 get() { return m_value; }
    internal:
        void set(_In_ uint16 value) { m_value = value; }
    }

    static SecuritySystemGetVersionResult^ CreateSuccessResult(_In_ uint16 value)
    {
        auto result = ref new SecuritySystemGetVersionResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Version = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static SecuritySystemGetVersionResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SecuritySystemGetVersionResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint16 m_value;
};

public ref class SecuritySystemGetIsEnabledResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property bool IsEnabled
    {
        bool get() { return m_value; }
    internal:
        void set(_In_ bool value) { m_value = value; }
    }

    static SecuritySystemGetIsEnabledResult^ CreateSuccessResult(_In_ bool value)
    {
        auto result = ref new SecuritySystemGetIsEnabledResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->IsEnabled = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static SecuritySystemGetIsEnabledResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SecuritySystemGetIsEnabledResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    bool m_value;
};

public ref class SecuritySystemSetIsEnabledResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    static SecuritySystemSetIsEnabledResult^ CreateSuccessResult()
    {
        auto result = ref new SecuritySystemSetIsEnabledResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static SecuritySystemSetIsEnabledResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SecuritySystemSetIsEnabledResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
};

public ref class SecuritySystemGetLastCaptureFileNameResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property Platform::String^ LastCaptureFileName
    {
        Platform::String^ get() { return m_value; }
    internal:
        void set(_In_ Platform::String^ value) { m_value = value; }
    }

    static SecuritySystemGetLastCaptureFileNameResult^ CreateSuccessResult(_In_ Platform::String^ value)
    {
        auto result = ref new SecuritySystemGetLastCaptureFileNameResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->LastCaptureFileName = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static SecuritySystemGetLastCaptureFileNameResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SecuritySystemGetLastCaptureFileNameResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    Platform::String^ m_value;
};

public ref class SecuritySystemGetLastCaptureTimeResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property Platform::String^ LastCaptureTime
    {
        Platform::String^ get() { return m_value; }
    internal:
        void set(_In_ Platform::String^ value) { m_value = value; }
    }

    static SecuritySystemGetLastCaptureTimeResult^ CreateSuccessResult(_In_ Platform::String^ value)
    {
        auto result = ref new SecuritySystemGetLastCaptureTimeResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->LastCaptureTime = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static SecuritySystemGetLastCaptureTimeResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SecuritySystemGetLastCaptureTimeResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    Platform::String^ m_value;
};

public ref class SecuritySystemGetLastUploadTimeResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property Platform::String^ LastUploadTime
    {
        Platform::String^ get() { return m_value; }
    internal:
        void set(_In_ Platform::String^ value) { m_value = value; }
    }

    static SecuritySystemGetLastUploadTimeResult^ CreateSuccessResult(_In_ Platform::String^ value)
    {
        auto result = ref new SecuritySystemGetLastUploadTimeResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->LastUploadTime = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static SecuritySystemGetLastUploadTimeResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new SecuritySystemGetLastUploadTimeResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    Platform::String^ m_value;
};

} } } } 
